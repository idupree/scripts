#!/usr/bin/env python

from __future__ import print_function, division
import random, sys, re, math

help = """random_alnum [-n[number of characters]] [-b[min bits of entropy]]
        [valid characters set for use in regexp character class]

  Outputs a bunch of cryptographically random ASCII characters.
  The default is to output 90 bits of entropy, consisting of
  lowercase letters a-z because those are the easiest to type
  across many devices (aside from 0-9, which have much less
  entropy per character).

  Might be useful for generating passwords, though anyone who
  looks over your shoulder might see your future password.

  Also outputs a trailing newline.
"""

num = None
bits_of_entropy = None
valid = b'a-z'

for arg in sys.argv[1:]:
    if re.search(r'^--help$|^--', arg):
        print(help)
        exit()
    elif re.search(r'^-n[0-9]+$', arg):
        num = int(re.sub(r'^-n', '', arg))
    elif re.search(r'^-b[0-9]+$', arg):
        bits_of_entropy = int(re.sub(r'^-b', '', arg))
    else:
        valid = arg.encode()

if num == None and bits_of_entropy == None:
  bits_of_entropy = 90

allbytes = bytes(bytearray(i for i in range(0, 256)))

validbytes = re.sub(b'[^'+valid+b']', b'', allbytes)

if bits_of_entropy != None:
    num = math.ceil(bits_of_entropy / math.log(len(validbytes), 2))

rng = random.SystemRandom()
n = 0
while n != num:
    rand = rng.choice(validbytes)
    if bytes is str:
        print(rand, end='')
    else:
        sys.stdout.buffer.write(bytes((rand,)))
    n += 1
print()

