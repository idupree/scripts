#!/usr/bin/env python

import os, sys, re, time, os.path, subprocess

if len(sys.argv) < 2 or sys.argv[1] in ['--help']:
    sys.stdout.write('''Usage:
`kitchen-timer 3:30` for 3 and a half minutes.
`kitchen-timer 20` for 20 minutes.
`kitchen-timer :20` for 20 seconds.
''')
    exit(0)

sound_file = os.path.join(sys.path[0], 'timer-sound.ogg')
if not os.path.exists(sound_file):
    sys.stderr.write("You need to pick a sound file and put it at timer-sound.ogg next to this script\n")
    exit(1)

match = re.search(r'^([0-9.]*)(?::([0-9.]*))?$', sys.argv[1])

def num(x):
    if x == '' or x is None:
        return 0
    else:
        return float(x)

minutes = num(match.group(1))
seconds = num(match.group(2))

secs = 60 * minutes + seconds
secs = round(secs)   #don't need sub-second accuracy

now = time.time()
alarm_at = now + secs  #buggy for leap seconds, but a kitchen timer doesn't need that accuracy
def strf(t):
    return time.strftime('%a %Y-%m-%d %H:%M:%S %Z', time.localtime(t))
sys.stdout.write(strf(now) + "\n" + "sleeping for " + str(secs) + " seconds until " + strf(alarm_at))

# time.sleep(secs)
sys.stdout.write("\n")
try:
    while time.time() < alarm_at:
        sys.stdout.write("   " + str(int(secs)) + "        \r")
        secs -= 1
        time.sleep(1)
except KeyboardInterrupt:
    # make sure the final time is still visible if interrupted
    sys.stdout.write("\ninterrupted " + strf(time.time()) + " with " + str(secs+1) + " seconds\n")
    exit(1)
finally:
    sys.stdout.write("\n")
sys.stdout.write(strf(time.time()) + "\n")

try:
    subprocess.call(['cvlc', '--quiet', '--play-and-exit', sound_file])
except KeyboardInterrupt:
    exit(0)

